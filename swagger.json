{
  "openapi": "3.0.1",
  "info": {
    "version": "15:11 26.08.23",
    "title": "Swagger",
    "description": "!!!  Тут може бути ваша реклама  !!!",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json", "multipart/form-data"],
  "servers": [{ "url": "http://localhost:8000" }],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Boards",
      "description": "Boards & Columns endpoints"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register a new user",
        "parameters": [],
        "requestBody": {
          "description": "This endpoint allows users to register by providing their name, email, and password in the request body.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/UserResponse"
                    },
                    "token": {
                      "$ref": "#/components/schemas/Token"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error409"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Log in a user",
        "parameters": [],
        "requestBody": {
          "description": "Authenticate users by providing their email and password in the request body.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/UserResponse"
                    },
                    "token": {
                      "$ref": "#/components/schemas/Token"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error400"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error401"
                },
                "examples": {
                  "invalidCredentials": {
                    "description": "",
                    "value": {
                      "message": "Email or password wrong"
                    }
                  },
                  "passwordComparisonFailed": {
                    "description": "",
                    "value": {
                      "message": "Email or password wrong"
                    }
                  },
                  "userAlreadyLoggedIn": {
                    "description": "",
                    "value": {
                      "message": "This user is logged"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/update": {
      "put": {
        "tags": ["Auth"],
        "summary": "Update user information",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": "true",
            "type": "string",
            "description": "ID of the user to update"
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Provide updated user information in the request body.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error401"
                },
                "examples": {
                  "!user": {
                    "description": "",
                    "value": {
                      "message": "User with id not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Log out a user",
        "description": "This endpoint allows a logged-in user to log out by sending a POST request. The user's authentication token needs to be included in the request headers for successful logout.",
        "parameters": [],
        "security": [{ "Bearer": [] }],

        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/res204"
                }
              }
            }
          }
        }
      }
    },
    "/boards/": {
      "get": {
        "tags": ["Boards"],
        "summary": "Get all boards for the current user",
        "description": "This endpoint allows a logged-in user to retrieve all boards associated with their account. The user's authentication token needs to be included in the request headers for successful access.",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/getAllBoardsResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error401"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Boards"],
        "summary": "Create a new board",
        "description": "This endpoint allows a logged-in user to create a new board.",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Provide the necessary information to create a new board.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getBoardRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/getBoardResponse"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error401"
                }
              }
            }
          },
          "404": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error404"
                }
              }
            }
          }
        }
      }
    },
    "/boards/{boardId}": {
      "get": {
        "tags": ["Boards"],
        "summary": "Get board by ID",
        "description": "This endpoint allows a user to retrieve information about a specific board by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "boardId",
            "required": "true",
            "schema": {
              "type": "string",
              "format": "ObjectId"
            },
            "description": "ID of the board to retrieve"
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardObjResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error401"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error404"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Ivan Petrov"
          },
          "email": {
            "type": "string",
            "example": "ivan@example.com",
            "format": "email"
          },
          "password": {
            "type": "string",
            "example": "qwerty123"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "example": "ivan@example.com",
            "format": "email"
          },
          "password": {
            "type": "string",
            "example": "qwerty123"
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "required": [],
        "properties": {
          "name": {
            "type": "string",
            "example": "Anton Ptuchkin"
          },
          "email": {
            "type": "string",
            "example": "anton@example.com",
            "format": "email"
          },
          "password": {
            "type": "string",
            "example": "777qwerty"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "7dh347fh4375fh45"
          },
          "name": {
            "type": "string",
            "example": "Ivan Petrov"
          },
          "email": {
            "type": "string",
            "example": "ivan@example.com",
            "format": "email"
          },
          "thema": {
            "type": "string",
            "example": "dark"
          },
          "photo": {
            "type": "string",
            "example": "https://en.gravatar.com/"
          }
        }
      },
      "UpdateUserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Anton Ptuchkin"
          },
          "email": {
            "type": "string",
            "example": "anton@example.com",
            "format": "email"
          },
          "password": {
            "type": "string",
            "example": "777qwerty"
          }
        }
      },
      "getAllBoardsResponse": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Main board"
          },
          "icon": {
            "type": "string"
          },
          "ownerId": {
            "type": "string",
            "example": "64ef7e4e6fe614f2171a12c2"
          },
          "id": {
            "type": "string",
            "example": "64ef796f093c81f56908b4b8"
          }
        }
      },
      "getBoardRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Main board"
          },
          "icon": {
            "type": "string",
            "example": "https://en.gravatar.com/....."
          },
          "background": {
            "type": "string",
            "example": "https://en.gravatar.com/....."
          }
        }
      },
      "getBoardResponse": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Main board"
          },
          "icon": {
            "type": "string"
          },
          "background": {
            "type": "string",
            "example": "https://en.gravatar.com/....."
          },
          "ownerId": {
            "type": "string",
            "example": "64ef7e4e6fe614f2171a12c2"
          },
          "columns": {
            "type": "array",
            "example": "[{},{}]"
          }
        }
      },
      "Token": {
        "type": "string",
        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaWQiOiIyOWI4ZmZmNS0xN2NjLTQ5NTYtOTViZC1jN2U3N2FkZDEwOWEiLCJpYXQiOjE2ODE4OTM3MzEsImV4cCI6MTAwMDAwMDE2ODE4OTM3MzJ9.hQpNKIj4SR7Gm9waUMn7hzwKQyqwKrniL_qSW7SxrjM"
      },
      "res204": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "No content"
          }
        }
      },
      "error400": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Bad request"
          }
        }
      },
      "error401": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Not authorized"
          }
        }
      },
      "error404": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Not found"
          }
        }
      },
      "error409": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Email in use"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
